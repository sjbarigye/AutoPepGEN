import genetic_algorithm
from joblib import dump, load


class peptide_generator():
    """
	   - Peptide sequences are generated by executing this file
	   - self.array_max and self.array_min contain maximum and minimum descriptor values used to rescale inputs	   
	   - To fix peptide positions with specific aminoacids, call the generate_sequences() on a peptide_generator object
    	 specifying the optional variable fixed_residues with a dictionary of the format {"position" : "residue"} 
	     e.g. {1:"A", 5:"R"} will fix the position 1 with A and position 5 with R. Peptide sequences start at 0.	
	"""
	
	
    def __init__(self):
        self.classifier = load('dengue_svm_clf.joblib')
        self.dengue_matrix = load('dengue_matrix.joblib')
        self.descriptors = ["DAWD720101_GM", "JURD980101_PM3","KHAG800101_PM2", "MCMT640101_P75", "MEEJ800101_R", "MEEJ800102_MIN", "PONP800104_R", "WOLS870102_I50", "YUTK870101_[MBAC(3)]M1"]
        self.array_max = [7.246, 3.58, 133., 42.53, 31.8, -0.1, 4.38, 7.88, 173.556]
        self.array_min = [1.872, -4.658, 19.114, 14.655, 0.7, -7.5, 0.31, 0.66, 0.]

        self.pop_size=50
        self.cxprob=0.5
        self.mutprob=0.2
        self.ngen=50

    def set_ga_configuration(self,pop_size=50,cxprob=0.5, mutprob=0.2,ngen=50):
        self.pop_size=pop_size
        self.cxprob=cxprob
        self.mutprob=mutprob
        self.ngen=ngen       

    def generate_sequences(self, len_low=2, len_high=3, num_seq=1,outputfile="results_sequences.txt", fixed_residues={}):
        output = open(outputfile, "a")

        fixed_residues_ = {}

        if len(fixed_residues) > 0 :
            if len_low != len_high:
                print("DIFFERENT SEQUENCE LENGTHS, RESIDUES TO BE FIXED WILL BE IGNORED\n")
            elif len_high < max([*fixed_residues]):
                print("RESIDUE INDEX GREATER THAN SEQUENCE LENGTH, RESIDUES TO BE FIXED WILL BE IGNORED\n")
            else:
                fixed_residues_ = fixed_residues

        for length in range(len_low,len_high+1):
            fsga = genetic_algorithm.PeptideSelectionGA(self.classifier, self.dengue_matrix, length, array_max, array_min, self.descriptors, fixed_residues_) 
            pop = fsga.generate(self.pop_size,self.cxprob,self.mutprob,self.ngen)
            fsga.out_put_best(pop,num_seq, output)
            


if __name__ == '__main__':
    pep_gen = peptide_generator()
    pep_gen.set_ga_configuration(pop_size=100,cxprob=0.5, mutprob=0.2,ngen=200000)       
    pep_gen.generate_sequences(3,10,10,"results_sequences_size3to10.txt") #{1:"A", 5:"R"}
    
